#!@BASH@
# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
# vim: set filetype=sh sw=3 sts=3 expandtab autoindent:

#####################################################
## SSH RELATED FUNCTIONS

function ssh_create_root_key() {
   local title=$1
   local host=$2
   local user=$3

   if [ ! -f /root/.ssh/id_dsa.pub -a ! -f /root/.ssh/id_rsa.pub ]; then
      echo "Creating local root's ssh key"
      ssh-keygen -t rsa -b 4096 -f /root/.ssh/id_rsa -N ""
      echo "Done. hit return to continue"
      read
   fi

   ssh -o PreferredAuthentications=publickey $host -l $user "exit" 2> /dev/null
   if [ $? -ne 0 ]; then
      echo "Copying root's public ssh key to authorized_keys of $user@$host. When prompted, specify the password for user $user@$host."
      ssh-copy-id -i /root/.ssh/id_[rd]sa.pub $user@$host
      if [ $? -ne 0 ]; then
         echo "FAILED: Couldn't copy root's public ssh key to authorized_keys of $user@$host."
         ssh $user@$host 'test -w .ssh || test -w .'
         result=$?
         echo "Hit return to continue."
         read
         case $result in
            0 )   msgBox "$title: error" "Directories are writable: Probably just a typo the first time." ;;
            1 )   msgBox "$title: error" "Connected successfully to $user@$host, but unable to write. Check ownership and modes of ~$user on $host." ;;
            255 ) msgBox "$title: error" "Failed to connect to $user@$host. Check hostname, username, and password. Also, make sure sshd is running on the destination host." ;;
            * )   msgBox "$title: error" "Unexpected error." ;;
         esac
         return 1
      else
         echo "Done. hit return to continue"
         read
      fi
   else
      echo "root@localhost is already in authorized_keys of $user@$host."
      echo "Hit return to continue."
      read
   fi

   return 0
}

function ssh_ensure_remote_dir() {
   local title=$1
   local directory=$2
   local host=$3
   local user=$4

   local remote_status="ok"

   echo "Testing to see if remote backup directory exists and is writable"
   ssh $user@$host "test -d ${directory}"
   if [ $? = 0 ]; then
      ssh $user@$host "test -w $directory"
      if [ $? != 0 ]; then
         msgBox "destination directory is not writable!" "The remote destination directory is not writable by the user you specified. Please fix the permissions on the directory and then try again."
         remote_status=failed
      fi
   else
      booleanBox "Remote directory does not exist" "The destination backup directory does not exist, do you want me to create it for you?"
      if [ $? = 0 ]; then
         ssh $user@$host "mkdir -p ${directory}"
         result=$?
         case $result in
            0) msgBox "$title: success" "Creation of the remote destination directory was a success!";;
            1) msgBox "$title: error" "Connected successfully to $user@$host, but was unable to create the destination directory, check the directory permissions."
               remote_status=failed;;
            255) msgBox "$title: error" "Failed to connect to $user@$host. Check hostname, username, and password. Also, make sure sshd is running on the destination host."
               remote_status=failed;;
            *) msgBox "$title: error" "Unexpected error."
               remote_status=failed;;
         esac
      fi
   fi

   if [ "$remote_status" != "ok" ]; then
      return 1
   fi

   return 0
}

function ssh_test_connection() {
   # given a user and host,
   # tests the connection.
   # if user or host is missing, returns 0
   # (ie, assume it's a local connection).
   if [ $# -lt 2 ]; then
      debug "(local is assumed to be a good connection)"
      return 0
   fi
   local user=$1
   local host=$2
   debug "ssh -o PasswordAuthentication=no $host -l $user 'echo -n host is alive'"
   local ret=`ssh -o PasswordAuthentication=no $host -l $user 'echo -n host is alive'`
   if echo $ret | grep "host is alive"; then
      debug "Connected to $host as $user successfully"
   else
      fatal "Can't connect to $host as $user."
   fi
}
