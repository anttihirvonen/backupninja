# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
# vim: set filetype=sh sw=3 sts=3 expandtab autoindent:
#
# bup handler script for backupninja
# requires the bup binary, and ssh for remote connections
#

### GET CONFIG ###

setsection source
getconf path

setsection dest
getconf bupdir
getconf branch

# See possible values in bup.helper, or in a config file generated by it.
getconf type local; desttype=$type
# The three values below are only useful if the backup is remote, in other
# words, if the type is one of "remote" or "on".
#
# The user is optional. If none is specified, we'll be connecting to remote
# server as the same user as the one running this backup job (most probably
# root) or if you have an entry in your ~/.ssh/config file that specifies a
# user for the host, it will be used.
getconf remote_bupdir
getconf host localhost
getconf user

PATH_LIST=$(echo $path | sed -e 's/\n/ /g')

debug "backup type is set to '$desttype'"

REMOTE_URL=
if [ "$desttype" = "remote" ] || [ "$desttype" = "on" ]; then
    ssh_test_connection $user $host

    HOST_SPEC="$host"

    if [ -n "$user" ]; then
        HOST_SPEC="${user}@$host"
    fi

    REMOTE_URL="-r $HOST_SPEC:$remote_bupdir"
fi

if [ -n "$bupdir" ]; then
    BUP_DIR="$bupdir"
    export BUP_DIR
    debug "BUP_DIR set to: $bupdir"
fi

### CHECK CONFIG ###
if [ -z "$path" ]; then
    fatal "No source path was given."
fi

if [ -z "$branch" ]; then
    fatal "The backup branch was not specified."
fi

if [ -z "$bupdir" ]; then
    debug "No bupdir specified: using the default location of ~/.bup !"
fi

### REMOVE OLD BACKUPS ###
# This is not yet implemented in bup itself.

### EXECUTE ###

if [ "$desttype" = "on" ]; then
    debug "bup on $HOST_SPEC index -u $PATH_LIST"
    if output=$(bup on $HOST_SPEC index -u $PATH_LIST 2>&1); then
        debug "$output"
        info "Indexing completed successfully"
    else
        warning "$output"
        warning "bup index encountered errors"
    fi

    debug "bup on $HOST_SPEC save -n $branch $PATH_LIST"
    if output=$(bup on $HOST_SPEC save -n $branch $PATH_LIST 2>&1); then
        debug "$output"
        info "Successfullly finished backing up"
    else
        warning "$output"
        warning "bup save encountered errors"
    fi
else
    debug "bup index -u $PATH_LIST"
    if output=$(bup index -u $PATH_LIST 2>&1); then
        debug "$output"
        info "Indexing completed successfully"
    else
        warning "$output"
        warning "bup index encountered errors"
    fi

    debug "bup save $REMOTE_URL -n $branch $PATH_LIST"
    if output=$(bup save $REMOTE_URL -n $branch $PATH_LIST 2>&1); then
        debug "$output"
        info "Successfullly finished backing up"
    else
        warning "$output"
        warning "bup save encountered errors"
    fi
fi
