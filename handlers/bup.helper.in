# -*- mode: sh; sh-basic-offset: 3; indent-tabs-mode: nil; -*-
# vim: set filetype=sh sw=3 sts=3 expandtab autoindent:

HELPERS="$HELPERS bup:git-like_incremental_filesystem_backup"

do_bup_src() {
   # choose the files to backup
   REPLY=
   while [ -z "$REPLY" ]; do
      formBegin "$bup_title - host system: includes"
         for ((i=0; i < ${#bup_includes[@]} ; i++)); do
            formItem include ${bup_includes[$i]}
         done
         formItem include
         formItem include
         formItem include
         formItem include
         formItem include
         formItem include
         formItem include
         formItem include
      formDisplay
      [ $? = 0 ] || return
      unset bup_includes
      bup_includes=($REPLY)
   done

   # choose the files to exclude from the backup
   REPLY=
   while [ -z "$REPLY" ]; do
      formBegin "$bup_title - host system: excludes"
         for ((i=0; i < ${#bup_excludes[@]} ; i++)); do
            formItem exclude ${bup_excludes[$i]}
         done
         formItem exclude
         formItem exclude
         formItem exclude
         formItem exclude
         formItem exclude
         formItem exclude
         formItem exclude
         formItem exclude
      formDisplay
      [ $? = 0 ] || return
      unset bup_excludes
      bup_excludes=($REPLY)
   done
   set +o noglob

   # choose the path regex'es to exclude from the backup
   REPLY=
   while [ -z "$REPLY" ]; do
      formBegin "$bup_title - host system: exclude regular expressions"
         for ((i=0; i < ${#bup_excludes_rx[@]} ; i++)); do
            formItem exclude_rx ${bup_excludes_rx[$i]}
         done
         formItem exclude_rx
         formItem exclude_rx
         formItem exclude_rx
         formItem exclude_rx
         formItem exclude_rx
         formItem exclude_rx
         formItem exclude_rx
         formItem exclude_rx
      formDisplay
      [ $? = 0 ] || return
      unset bup_excludes_rx
      bup_excludes_rx=($REPLY)
   done
   set +o noglob

   _bup_src_done="(DONE)"
   setDefault dest
}

do_bup_dest() {
   set -o noglob
   REPLY=
   while [ -z "$REPLY" -o -z "$bup_directory" ]
   do
      formBegin "$bup_title - The bup directory is a bup repository. For local backups, this is where files will be saved.  For remote backups, only the local file index will be saved there, while files will be saved in the remote directory."
         formItem "dest_bup_directory" "$bup_directory"
      formDisplay
      [ $? = 0 ] || return
      bup_directory=$REPLY

      echo "Initializing local bup repository in $bup_directory"
      bup -d "$bup_directory" init
      if [ "$?" -ne 0 ]; then
         echo "Initialization failed. Check errors above."
         REPLY=
         read
      fi
   done

   REPLY=
   while [ -z "$REPLY" -o -z "$bup_type" ]
   do
      formBegin "$bup_title - The type of destination bup repository. Can be 'local', 'remote' or 'on'."
         formItem "dest_type" "$bup_type"
      formDisplay
      [ $? = 0 ] || return
      bup_type=$REPLY
      if [ "$bup_type" != "local" ] && [ "$bup_type" != "remote" ] && [ "$bup_type" != "on" ]; then
         echo "Wrong backup type. Must be one of 'local', 'remote' or 'on'."
         bup_type=
         read
      fi
   done

   REPLY=
   while [ -z "$REPLY" -o -z "$bup_branch" -o -z "$bup_remote_bupdir" ]
   do
     formBegin "$bup_title - destination: last two items are required for types 'remote' and 'on'."
        formItem "dest_bup_remote_bupdir" "$bup_remote_bupdir"
        formItem "dest_branch" "$bup_branch"
        formItem "dest_host" "$bup_host"
        formItem "dest_user" "$bup_user"
        formDisplay
     [ $? = 0 ] || return
     tmp_array=($REPLY)
     bup_remote_bupdir=${tmp_array[0]}
     bup_branch=${tmp_array[1]}
     bup_host=${tmp_array[2]}
     bup_user=${tmp_array[3]}
     if [ "$bup_type" = "remote" ] || [ "$bup_type" = "on" ]; then
        if [ -z "$bup_host" ] || [ -z "$bup_user" ]; then
            echo "You must specify the hostname and the user for the chosen backup type."
            REPLY=
            read
        fi
     fi
   done
   set +o noglob

   _bup_dest_done="(DONE)"

   if [ "$bup_type" = "local" ]; then
      # No need to setup remote connection for local backups
      _bup_con_done="(DONE)"
      setDefault finish
   else
      # Reset _bup_con_done in case user re-ran this option and chose a
      # different backup type.
      _bup_con_done=
      setDefault conn
   }
}

do_bup_ssh_con() {
   IFS=$' \t\n'
   if [ "$_bup_dest_done" = "" ]; then
      msgBox "$bup_title: error" "You must first configure the destination."
      return
   elif [ "$bup_branch" = "" ]; then
      msgBox "$bup_title: error" "You must first configure the backup branch your server will push to."
      return
   elif [ "$bup_type" = "" ]; then
      msgBox "$bup_title: error" "You must first configure the backup type."
      return
   elif [ "$bup_directory" = "" ]; then
      msgBox "$bup_title: error" "You must first configure the local bup directory."
      return
   else
      booleanBox "$bup_title" "This step will create an SSH key for the local root user with no passphrase (if one does not already exist), and attempt to copy root's public ssh key to authorized_keys file of $bup_user@$bup_host. This will allow the local root to make unattended backups to $bup_user@$bup_host.\n\n\nAre you sure you want to continue?"
      [ $? = 0 ] || return
   fi

   if [ "$bup_type" = "local" ]; then
      msgBox "$bup_title: info" "This step is not needed for local backups."
      return
   fi

   ssh_create_root_key "$bup_title" "$bup_host" "$bup_user"
   if [ "$?" != "0" ]; then
      msgBox "$bup_title: error" "root SSH key creation failed, can't go further."
      return
   fi

   echo "Initializing remote bup repository"
   ssh_ensure_remote_dir "$bup_title" "$bup_remote_bupdir" "$bup_host" "$bup_user"
   if [ "$?" != "0" ]; then
      msgBox "$bup_title: error" "Couldn't ensure that remote dir is created and accessible, can't go further."
      return
   fi
   ssh $bup_user@$bup_host "bup -d '$bup_remote_bupdir' init"
   case $? in
      0) msgBox "$bup_title: success" "Creation of the remote destination repository was a success!";;
      1) msgBox "$bup_title: error" "Connected successfully to $bup_user@$bup_host, but was unable to initilize the destination bup repository."
         return;;
      255) msgBox "$bup_title: error" "Failed to connect to $bup_user@$bup_host. Check hostname, username, and password. Also, make sure sshd is running on the destination host."
         return;;
      *) msgBox "$bup_title: error" "Unexpected error."
         return;;
   esac

   _bup_con_done="(DONE)"
   setDefault finish
}

do_bup_finish() {
   get_next_filename $configdirectory/90.bup

   cat > $next_filename <<EOF
# when = everyday at 02

[source]
# A few notes about includes and excludes:
# 1. include and exclude statements support globbing with '*'
# 2. All the excludes come after all the includes. The order is not otherwise
#    taken into account.

# files/directories to include in the backup
EOF
   set -o noglob
   for ((i=0; i < ${#bup_includes[@]} ; i++)); do
      echo "path = ${bup_includes[$i]}" >> $next_filename
   done
   set +o noglob

   echo "# files to exclude from the backup" >> $next_filename
   set -o noglob
   for ((i=0; i < ${#bup_excludes[@]} ; i++)); do
      echo "exclude = ${bup_excludes[$i]}" >> $next_filename
   done
   set +o noglob

   echo "# exclude from the backup paths that match those regular expressions" >> $next_filename
   set -o noglob
   for ((i=0; i < ${#bup_excludes_rx[@]} ; i++)); do
      echo "exclude_rx = ${bup_excludes_rx[$i]}" >> $next_filename
   done
   set +o noglob

   cat >> $next_filename <<EOF

[dest]
# Three possible backup types:
#  * local -- save to a bup repository on the local computer filesystem hierarchy
#  * remote -- push your data to a bup repository on a remote host via SSH
#  * on -- pull data from the remote server to the local bup repository via SSH
type = $bup_type
# The local bup directory is always needed. It always holds index files and
# also the whole backup when doing a "local" or an "on" backup.
bupdir = $bup_directory
# Each server/backup origin should have its own branch.
branch = $bup_branch
EOF

   if [ "$bup_type" = "remote" ] || [ "$bup_type" = "on" ]; then
      cat >> $next_filename <<EOF
remote_bupdir = $bup_remote_bupdir
host = $bup_host
user = $bup_user
EOF
   fi

   chmod 600 $next_filename
}

bup_wizard() {
   # Global variables
   _bup_src_done=
   _bup_dest_done=
   _bup_con_done=

   # Global variables whose '*' shall not be expanded
   set -o noglob
   bup_includes=(/etc /var/backups /var/spool/cron/crontabs /root /home /usr/local/*bin /var/lib/dpkg/status*)
   # Normally, bup automatically excludes its own local repository to avoid
   # re-entrant backups (backing up the backup) so we shouldn't need to specify
   # the bupdir in the excludes
   bup_excludes=(/home/*/.gnupg /home/*/.local/share/Trash /home/*/.Trash /home/*/.thumbnails /home/*/.beagle /home/*/.aMule /home/*/gtk-gnutella-downloads /var/cache/backupninja/duplicity)
   bup_excludes_rx=
   bup_directory=/var/backups/filesystem.bup
   set +o noglob

   bup_title="bup action wizard"
   srcitem="Choose paths to include or exclude from the backup"
   destitem="Choose location of the bup repository and branch of the backup"
   conitem="Set up ssh keys and test remote connection"

   while true; do
      menuBox "$bup_title" "choose a step:" \
         src "$srcitem $_bup_src_done" \
         dest "$destitem $_bup_dest_done" \
         conn "$conitem $_bup_con_done" \
         finish "finish and create config file"
      [ $? = 0 ] || return
      result="$REPLY"
      case "$result" in
         "src") do_bup_src;;
         "dest") do_bup_dest;;
         "conn") do_bup_ssh_con;;
         "finish")
            if [[ "$_bup_con_done$_bup_dest_done$_bup_src_done" != "(DONE)(DONE)(DONE)" ]]; then
               msgBox "$bup_title" "You cannot create the configuration file until the first three steps are completed."
            else
               do_bup_finish
               return
            fi
            ;;
      esac
   done
}

